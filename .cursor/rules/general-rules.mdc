---
description: 
globs: 
alwaysApply: true
---
# Cursor AI 개발 지침서 - 비즈니스 포토 앱

## 📁 프로젝트 개요
- **앱명**: 비즈니스 포토 - 소상공인 특화 필터 앱
- **플랫폼**: Flutter (Android/iOS)
- **타겟**: 소상공인, 매장 운영자
- **목적**: 매장용 사진을 프로처럼 편집

## 🚨 UI/UX 보호 규칙 (최우선 준수 - 절대 위반 금지)

### 🔒 기존 UI 구조 절대 변경 금지
- **레이아웃**: 기존 위젯의 배치, 크기, 위치 변경 금지
- **스타일링**: 색상, 폰트, 크기, 패딩, 마진 등 시각적 요소 유지
- **애니메이션**: 기존 전환 효과와 애니메이션 보존
- **컴포넌트 계층**: 위젯 트리 구조 변경 금지

### 🔒 기존 UX 플로우 보존
- **인터랙션**: 사용자 터치/클릭 패턴 유지
- **네비게이션**: 화면 간 이동 구조 보존
- **버튼 동작**: 기존 버튼의 위치와 기능 유지
- **제스처**: 기존 터치 제스처와 스와이프 동작 보존

### 🔒 에러 수정 시 제한사항
- **최소 변경**: 오직 에러를 일으키는 최소한의 코드만 수정
- **UI 파일 제한**: UI 관련 파일 수정 시 스타일링 코드 건드리지 말 것
- **위젯 교체 금지**: 기존 위젯을 새로운 위젯으로 교체하지 말 것
- **구조 보존**: 레이아웃 구조 변경 없이 기능만 수정

### 🔒 새 기능 추가 시 규칙
- **기존 영향 최소화**: 기존 UI에 최소한의 영향을 주는 방식으로 추가
- **위치 고정**: 새 위젯 추가 시 기존 위젯 위치나 크기 변경 금지
- **일관성 유지**: 기존 스타일 가이드와 일치하는 디자인 사용
- **패턴 준수**: 기존 컴포넌트와 동일한 디자인 패턴 적용

### 🔒 수정 전 필수 확인사항
- **영향도 검토**: 수정이 기존 UI/UX에 영향을 주는지 검토
- **대안 제시**: 영향을 준다면 대안적인 수정 방법 제안
- **사전 알림**: 사용자에게 UI 변경 사항이 있는지 미리 알림
- **최소 변경 우선**: 최소한의 변경으로 문제 해결 방법 우선 고려

### ⚠️ 절대 금지 사항
- Material Design을 Cupertino로 변경
- 기존 색상 팔레트 변경 (#4F46E5, #7C3AED 등)
- 레이아웃 구조 전면 수정
- 기존 애니메이션 제거나 변경
- 폰트나 텍스트 스타일 변경
- 버튼 디자인이나 위치 변경
- 네비게이션 구조 변경
- AppTextStyles 클래스 수정
- 기존 BorderRadius, Padding, Margin 값 변경

### 🎯 올바른 수정 응답 예시
```
❌ 잘못된 응답: "UI를 개선하기 위해 레이아웃을 변경하겠습니다"
✅ 올바른 응답: "기존 UI를 유지하면서 해당 기능만 수정하겠습니다"

❌ 잘못된 응답: "더 나은 사용자 경험을 위해 버튼 위치를 바꾸겠습니다"
✅ 올바른 응답: "현재 UI 구조를 그대로 유지하면서 버그만 수정하겠습니다"
```

## 🎯 핵심 기능 요구사항

### 1. 메인 화면 (lib/screens/main_screen.dart)
- 사진 업로드 (카메라/갤러리)
- 카테고리별 필터 선택 (음식, 매장, 제품, 패션)
- 필터 미리보기
- 하단 네비게이션

### 2. 편집 화면 (lib/screens/edit_screen.dart)
- 실시간 필터 적용
- 슬라이더 조정 (밝기, 대비, 채도, 따뜻함)
- 이미지 저장

### 3. 브랜딩 화면 (lib/screens/branding_screen.dart)
- 로고 추가
- 브랜드 컬러 적용
- 워터마크 기능

## 🎨 디자인 시스템 (절대 변경 금지)

### 색상 (lib/constants/colors.dart)
```dart
- Primary: #4F46E5 (인디고) - 절대 변경 금지
- Primary Dark: #7C3AED (퍼플) - 절대 변경 금지
- Background: #F8FAFC (라이트 그레이) - 절대 변경 금지
- Surface: #FFFFFF (화이트) - 절대 변경 금지
- Text Primary: #1F2937 (다크 그레이) - 절대 변경 금지
- Text Secondary: #6B7280 (미디움 그레이) - 절대 변경 금지
```

### 텍스트 스타일 (lib/constants/text_styles.dart) - 절대 변경 금지
- 폰트: NotoSans (한글 지원)
- 헤더: 24px, Bold
- 섹션 타이틀: 18px, SemiBold
- 버튼: 16px, SemiBold

### 현재 앱 구조 (절대 변경 금지)
```
메인 화면 구조:
AppBar (비즈니스 포토)
└── 이미지 업로드 영역
└── 카테고리별 필터 (음식/매장/제품/패션)
└── 패션 전용 필터 (3개 옵션)
└── 미리보기/편집시작 버튼
└── 하단 네비게이션

편집 화면 구조:
AppBar (편집)
└── 이미지 미리보기
└── 슬라이더 컨트롤 (밝기/대비/채도/따뜻함)
└── 저장/취소 버튼
```

## 🧩 컴포넌트 구조

### 재사용 위젯들 (기존 구조 유지)
1. **CustomButton** (lib/widgets/custom_button.dart)
   - Primary/Secondary 버튼
   - 로딩 상태 지원
   - 애니메이션 효과

2. **CategoryCard** (lib/widgets/category_card.dart)
   - 카테고리 선택 카드
   - 활성 상태 표시
   - 호버 애니메이션

3. **FilterOptionCard** (lib/widgets/filter_option_card.dart)
   - 필터 옵션 카드
   - 그라데이션 배경
   - 선택 상태 표시

## 📱 사용자 경험 가이드라인 (기존 UX 유지)

### 애니메이션 (기존 설정 유지)
- 모든 상태 변화에 부드러운 트랜지션 (200-300ms)
- 카드 호버: scale(1.02) + 그림자 효과
- 버튼 터치: scale(0.95) + 햅틱 피드백

### 피드백 (기존 방식 유지)
- 성공: 녹색 스낵바
- 오류: 빨간색 스낵바
- 로딩: 프로그레스 인디케이터
- 터치: 햅틱 피드백

### 접근성 (기존 기준 유지)
- 색상 대비 4.5:1 이상
- 터치 영역 44px 이상
- 스크린 리더 지원

## 🔧 기술적 요구사항

### 의존성 (pubspec.yaml)
```yaml
dependencies:
  flutter:
    sdk: flutter
  cupertino_icons: ^1.0.6
  image_picker: ^1.0.4
  image: ^4.1.3
  path_provider: ^2.1.1
  shared_preferences: ^2.2.2
```

### 상태 관리
- StatefulWidget 사용
- 복잡한 상태는 Provider 고려
- 메모리 효율적인 이미지 처리

### 성능 최적화
- 이미지 압축 (maxWidth: 1920, quality: 85)
- ListView.builder 사용
- const 키워드 적극 활용
- 불필요한 rebuild 방지

## 📁 파일 구조 가이드

```
lib/
├── main.dart                    # 앱 진입점
├── constants/
│   ├── colors.dart             # 색상 상수
│   └── text_styles.dart        # 텍스트 스타일
├── models/
│   ├── filter_category.dart    # 필터 카테고리 모델
│   └── filter_option.dart      # 필터 옵션 모델
├── screens/
│   ├── main_screen.dart        # 메인 화면
│   ├── edit_screen.dart        # 편집 화면
│   └── branding_screen.dart    # 브랜딩 화면
├── widgets/
│   ├── category_card.dart      # 카테고리 카드
│   ├── custom_button.dart      # 커스텀 버튼
│   └── filter_option_card.dart # 필터 옵션 카드
└── utils/
    └── image_utils.dart        # 이미지 유틸리티
```

## 🐛 디버깅 및 테스트

### 에러 처리
- 모든 async 함수에 try-catch
- 사용자 친화적 에러 메시지
- 로그 기록 (개발 모드)

### 테스트 방법
- Hot Reload 활용
- 실제 디바이스 테스트
- 다양한 화면 크기 확인

## 🚀 개발 워크플로우

### 1. 기능 구현 순서
1. UI 레이아웃 먼저 (기존 구조 유지)
2. 더미 데이터로 동작 확인
3. 실제 로직 구현 (UI 건드리지 않고)
4. 에러 처리 추가
5. 애니메이션 및 UX 개선 (기존 스타일 유지)

### 2. 코드 품질
- 의미있는 변수명 사용
- 함수는 50줄 이하로 유지
- 주석은 왜(Why)를 설명
- 코드 포맷팅 자동화

### 3. Git 커밋 메시지
```
feat: 카테고리 필터 기능 추가
fix: 이미지 업로드 오류 수정
style: 버튼 디자인 개선
refactor: 상태 관리 로직 개선
```

## 📝 개발 시 주의사항

### 성능
- 큰 이미지 파일 처리 시 isolate 사용 고려
- 메모리 누수 방지 (dispose 함수 확실히 호출)
- 애니메이션 컨트롤러 생명주기 관리

### 사용자 경험 (기존 UX 유지)
- 로딩 시간 2초 이상 시 프로그레스 표시
- 에러 상황에서도 앱 크래시 방지
- 오프라인 상황 고려

### 플랫폼별 고려사항
- Android: 백 버튼 처리
- iOS: Safe Area 고려
- 권한 요청 적절한 타이밍

## 🎯 우선순위 개발 순서

1. **1순위**: 메인 화면 UI + 기본 네비게이션 (기존 구조 유지)
2. **2순위**: 이미지 업로드 + 카테고리 선택
3. **3순위**: 편집 화면 + 실시간 필터
4. **4순위**: 브랜딩 기능
5. **5순위**: 애니메이션 + UX 개선 (기존 스타일 유지)

## 💡 추가 기능 아이디어

### 기본 기능 완성 후
- 일괄 편집 기능
- 클라우드 저장소 연동
- SNS 공유 기능
- 사용자 피드백 시스템
- 프리미엄 필터 (결제)

## 🎯 올바른 개발 접근 방법

### ✅ 정확한 요청 해석
```
사용자: "필터 버그 수정해줘"
해석: 기존 UI는 그대로 두고 필터 로직만 수정

사용자: "저장 기능 추가해줘"  
해석: 현재 레이아웃을 유지하면서 저장 기능만 구현

사용자: "성능 개선해줘"
해석: UI 변경 없이 코드 최적화만 진행
```

### ❌ 잘못된 해석 금지
```
사용자: "필터 개선해줘"
잘못된 해석: UI도 함께 개선 (금지)
올바른 해석: 기존 UI 유지하고 기능만 개선
```

이 가이드를 참고하여 **기존 UI/UX 구조를 절대 변경하지 않으면서** 체계적이고 일관성 있는 코드를 작성해주세요!